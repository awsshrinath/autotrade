name: CI/CD - Test, Build, Deploy

on:
  push:
    branches: [main, CICD1]
  repository_dispatch:
    types: [cluster_ready]

permissions:
  contents: write
  id-token: write

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  IMAGE_PREFIX: asia-south1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/gpt-repo

jobs:
  test-and-build:
    # Run for both push and repository_dispatch to ensure images exist
    if: github.event_name == 'push' || github.event_name == 'repository_dispatch'
    name: üß™ Test & Build & Push Images
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: üì¶ Install Python dependencies
        run: pip install -r requirements.txt

      - name: üîê Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: üîê Set ADC for gsutil
        run: |
            echo ${{ secrets.GCP_SA_KEY }} > /tmp/key.json
            gcloud auth activate-service-account --key-file=/tmp/key.json
            gcloud auth application-default login --key-file=/tmp/key.json

      - name: üê≥ Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: üîç Check if images exist (for repository_dispatch)
        if: github.event_name == 'repository_dispatch'
        id: check_images
        run: |
          # Check if the main image exists
          if gcloud artifacts docker images list $IMAGE_PREFIX/gpt-runner --filter="tags:latest" --format="value(name)" | grep -q latest; then
            echo "images_exist=true" >> $GITHUB_OUTPUT
          else
            echo "images_exist=false" >> $GITHUB_OUTPUT
          fi

      - name: üöÄ Build & Push All Docker Images
        # Always build on push, only build on dispatch if images don't exist
        if: github.event_name == 'push' || (github.event_name == 'repository_dispatch' && steps.check_images.outputs.images_exist == 'false')
        run: |
          docker build -t $IMAGE_PREFIX/gpt-runner:latest --build-arg RUNNER_SCRIPT=runner/main_runner_combined.py .
          docker build -t $IMAGE_PREFIX/gpt-runner:v1748245661 --build-arg RUNNER_SCRIPT=runner/main_runner_combined.py .
          docker push $IMAGE_PREFIX/gpt-runner:latest
          docker push $IMAGE_PREFIX/gpt-runner:v1748245661

          docker build -t $IMAGE_PREFIX/stock-trader:latest --build-arg RUNNER_SCRIPT=stock_trading/stock_runner.py .
          docker push $IMAGE_PREFIX/stock-trader:latest

          docker build -t $IMAGE_PREFIX/options-trader:latest --build-arg RUNNER_SCRIPT=options_trading/options_runner.py .
          docker push $IMAGE_PREFIX/options-trader:latest

          docker build -t $IMAGE_PREFIX/futures-trader:latest --build-arg RUNNER_SCRIPT=futures_trading/futures_runner.py .
          docker push $IMAGE_PREFIX/futures-trader:latest

  setup-gcs-buckets:
    name: ü™£ Setup GCS Buckets
    if: github.event_name == 'push' || github.event_name == 'repository_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîê Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: ü™£ Create GCS Buckets
        run: |
          # Define bucket names and their retention policies
          declare -A BUCKETS=(
            ["tron-trading-logs"]="90"
            ["tron-trade-data"]="2555"
            ["tron-strategy-configs"]=""
            ["tron-cognitive-memory"]=""
            ["tron-thought-archives"]="365"
            ["tron-analysis-reports"]=""
            ["tron-memory-backups"]="180"
            ["tron-model-artifacts"]=""
            ["tron-market-data"]="30"
          )
          
          REGION="asia-south1"
          SERVICE_ACCOUNT="gpt-runner-sa@autotrade-453303.iam.gserviceaccount.com"
          
          echo "üöÄ Creating GCS buckets in region: $REGION"
          
          for bucket in "${!BUCKETS[@]}"; do
            echo "üî® Processing bucket: $bucket"
            
            # Check if bucket already exists
            if gsutil ls -b "gs://$bucket" &>/dev/null; then
              echo "‚ö†Ô∏è Bucket $bucket already exists, skipping creation"
            else
              echo "‚ú® Creating bucket: $bucket"
              
              # Create bucket with uniform bucket-level access and public access prevention
              gsutil mb -p ${{ secrets.GCP_PROJECT_ID }} -c STANDARD -l $REGION "gs://$bucket"
              
              # Enable uniform bucket-level access
              gsutil uniformbucketlevelaccess set on "gs://$bucket"
              
              # Enforce public access prevention
              gsutil pap set enforced "gs://$bucket"
              
              echo "‚úÖ Successfully created bucket: $bucket"
            fi
            
            # Add service account as storage.objectAdmin
            echo "üîê Adding service account permissions to $bucket"
            gsutil iam ch serviceAccount:$SERVICE_ACCOUNT:roles/storage.objectAdmin "gs://$bucket"
            
            # Set retention policy if specified
            retention_days="${BUCKETS[$bucket]}"
            if [ -n "$retention_days" ]; then
              echo "üìÖ Setting $retention_days-day retention policy for $bucket"
              
              # Create temporary lifecycle policy file
              cat > /tmp/lifecycle-$bucket.json <<EOF
          {
            "lifecycle": {
              "rule": [
                {
                  "action": {"type": "Delete"},
                  "condition": {"age": $retention_days}
                }
              ]
            }
          }
          EOF
              
              # Apply lifecycle policy
              gsutil lifecycle set /tmp/lifecycle-$bucket.json "gs://$bucket"
              rm /tmp/lifecycle-$bucket.json
              
              echo "‚úÖ Applied $retention_days-day retention policy to $bucket"
            fi
            
            # Enable versioning for specific buckets
            if [[ "$bucket" == *"memory-backups"* ]] || [[ "$bucket" == *"model-artifacts"* ]]; then
              echo "üîÑ Enabling versioning for $bucket"
              gsutil versioning set on "gs://$bucket"
            fi
            
            echo "‚úÖ Completed setup for bucket: $bucket"
            echo ""
          done
          
          echo "üéâ All GCS buckets have been set up successfully!"

      - name: üîç Verify Bucket Setup
        run: |
          echo "üìã Verifying bucket configuration..."
          
          BUCKETS=(
            "tron-trading-logs"
            "tron-trade-data" 
            "tron-strategy-configs"
            "tron-cognitive-memory"
            "tron-thought-archives"
            "tron-analysis-reports"
            "tron-memory-backups"
            "tron-model-artifacts"
            "tron-market-data"
          )
          
          for bucket in "${BUCKETS[@]}"; do
            echo "üîç Checking bucket: $bucket"
            
            # Check if bucket exists and get basic info
            if gsutil ls -L -b "gs://$bucket" &>/dev/null; then
              echo "‚úÖ Bucket $bucket exists"
              
              # Check uniform bucket-level access
              if gsutil uniformbucketlevelaccess get "gs://$bucket" | grep -q "Enabled: True"; then
                echo "  ‚úÖ Uniform bucket-level access: Enabled"
              else
                echo "  ‚ùå Uniform bucket-level access: Disabled"
              fi
              
              # Check public access prevention
              if gsutil pap get "gs://$bucket" | grep -q "Enforced"; then
                echo "  ‚úÖ Public access prevention: Enforced"
              else
                echo "  ‚ùå Public access prevention: Not enforced"
              fi
              
              # Check lifecycle policy
              if gsutil lifecycle get "gs://$bucket" &>/dev/null; then
                echo "  ‚úÖ Lifecycle policy: Configured"
              else
                echo "  ‚ÑπÔ∏è Lifecycle policy: Not configured"
              fi
              
            else
              echo "‚ùå Bucket $bucket does not exist"
            fi
            echo ""
          done

  deploy-to-prod:
    name: üöÄ Deploy to GKE
    if: github.event_name == 'push' || github.event_name == 'repository_dispatch'
    runs-on: ubuntu-latest
    needs: [test-and-build, setup-gcs-buckets]  # Wait for both images and buckets

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîê Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: üîé Check if GKE Cluster Exists
        id: check_cluster
        run: |
          echo "Checking for cluster: ${{ secrets.GKE_CLUSTER_NAME }}"
          if gcloud container clusters describe ${{ secrets.GKE_CLUSTER_NAME }} \
            --region ${{ secrets.GKE_ZONE }} \
            --project ${{ secrets.GCP_PROJECT_ID }} --quiet; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Cluster found"
          else
            echo "‚ùå Cluster not found"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: ‚è≥ Wait for cluster to be ready (repository_dispatch only)
        if: github.event_name == 'repository_dispatch' && steps.check_cluster.outputs.exists == 'true'
        run: |
          echo "Waiting for cluster to be fully ready..."
          sleep 60  # Give the cluster time to be fully ready
          
          # Wait for cluster to be in RUNNING state
          timeout 300 bash -c '
            while true; do
              STATUS=$(gcloud container clusters describe ${{ secrets.GKE_CLUSTER_NAME }} \
                --region ${{ secrets.GKE_ZONE }} \
                --project ${{ secrets.GCP_PROJECT_ID }} \
                --format="value(status)")
              echo "Cluster status: $STATUS"
              if [ "$STATUS" = "RUNNING" ]; then
                echo "‚úÖ Cluster is ready"
                break
              fi
              echo "‚è≥ Waiting for cluster to be ready..."
              sleep 10
            done
          '

      - name: ‚öôÔ∏è Get GKE Credentials
        if: steps.check_cluster.outputs.exists == 'true'
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
          location: ${{ secrets.GKE_ZONE }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: üèóÔ∏è Create GPT Namespace
        if: steps.check_cluster.outputs.exists == 'true'
        run: |
          echo "Creating namespace..."
          kubectl apply -f deployments/namespace.yaml
          
          # Wait for namespace to be ready
          kubectl wait --for=condition=Ready namespace/gpt --timeout=60s || true

      - name: üì¶ Apply Kubernetes Manifests
        if: steps.check_cluster.outputs.exists == 'true'
        run: |
          echo "Applying Kubernetes manifests..."
          kubectl apply -f deployments/
          
          echo "Waiting for main-runner deployment to be ready..."
          kubectl rollout status deployment main-runner -n gpt --timeout=300s

      - name: üîÑ Restart Bot Deployments
        if: steps.check_cluster.outputs.exists == 'true'
        run: |
          echo "Restarting deployments..."
          kubectl rollout restart deployment stock-trader -n gpt || true
          kubectl rollout restart deployment options-trader -n gpt || true
          kubectl rollout restart deployment futures-trader -n gpt || true
          kubectl rollout restart deployment main-runner -n gpt || true
          
          echo "Waiting for deployments to be ready..."
          kubectl rollout status deployment stock-trader -n gpt --timeout=300s || true
          kubectl rollout status deployment options-trader -n gpt --timeout=300s || true
          kubectl rollout status deployment futures-trader -n gpt --timeout=300s || true
          kubectl rollout status deployment main-runner -n gpt --timeout=300s || true

      - name: üîé Verify Pods
        if: steps.check_cluster.outputs.exists == 'true'
        run: |
          echo "Final pod status:"
          kubectl get pods -n gpt
          kubectl get deployments -n gpt