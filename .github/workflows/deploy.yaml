name: CI/CD - Test, Build, Deploy

on:
  push:
    branches: [main, CICD1]
  repository_dispatch:
    types: [cluster_ready]

permissions:
  contents: write
  id-token: write

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  IMAGE_PREFIX: asia-south1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/gpt-repo

jobs:
  test-and-build:
    # Run for both push and repository_dispatch to ensure images exist
    if: github.event_name == 'push' || github.event_name == 'repository_dispatch'
    name: 🧪 Test & Build & Push Images
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: 📦 Install Python dependencies
        run: pip install -r requirements.txt

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 🐳 Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: 🔍 Check if images exist (for repository_dispatch)
        if: github.event_name == 'repository_dispatch'
        id: check_images
        run: |
          # Check if the main image exists
          if gcloud artifacts docker images list $IMAGE_PREFIX/gpt-runner --filter="tags:latest" --format="value(name)" | grep -q latest; then
            echo "images_exist=true" >> $GITHUB_OUTPUT
          else
            echo "images_exist=false" >> $GITHUB_OUTPUT
          fi

      - name: 🚀 Build & Push All Docker Images
        # Always build on push, only build on dispatch if images don't exist
        if: github.event_name == 'push' || (github.event_name == 'repository_dispatch' && steps.check_images.outputs.images_exist == 'false')
        run: |
          docker build -t $IMAGE_PREFIX/gpt-runner:latest --build-arg RUNNER_SCRIPT=runner/main_runner_combined.py .
          docker build -t $IMAGE_PREFIX/gpt-runner:v1748245661 --build-arg RUNNER_SCRIPT=runner/main_runner_combined.py .
          docker push $IMAGE_PREFIX/gpt-runner:latest
          docker push $IMAGE_PREFIX/gpt-runner:v1748245661

          docker build -t $IMAGE_PREFIX/stock-trader:latest --build-arg RUNNER_SCRIPT=stock_trading/stock_runner.py .
          docker push $IMAGE_PREFIX/stock-trader:latest

          docker build -t $IMAGE_PREFIX/options-trader:latest --build-arg RUNNER_SCRIPT=options_trading/options_runner.py .
          docker push $IMAGE_PREFIX/options-trader:latest

          docker build -t $IMAGE_PREFIX/futures-trader:latest --build-arg RUNNER_SCRIPT=futures_trading/futures_runner.py .
          docker push $IMAGE_PREFIX/futures-trader:latest

  deploy-to-prod:
    name: 🚀 Deploy to GKE
    if: github.event_name == 'push' || github.event_name == 'repository_dispatch'
    runs-on: ubuntu-latest
    needs: test-and-build  # Wait for images to be built/verified

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 🔎 Check if GKE Cluster Exists
        id: check_cluster
        run: |
          echo "Checking for cluster: ${{ secrets.GKE_CLUSTER_NAME }}"
          if gcloud container clusters describe ${{ secrets.GKE_CLUSTER_NAME }} \
            --region ${{ secrets.GKE_ZONE }} \
            --project ${{ secrets.GCP_PROJECT_ID }} --quiet; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "✅ Cluster found"
          else
            echo "❌ Cluster not found"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: ⏳ Wait for cluster to be ready (repository_dispatch only)
        if: github.event_name == 'repository_dispatch' && steps.check_cluster.outputs.exists == 'true'
        run: |
          echo "Waiting for cluster to be fully ready..."
          sleep 60  # Give the cluster time to be fully ready
          
          # Wait for cluster to be in RUNNING state
          timeout 300 bash -c '
            while true; do
              STATUS=$(gcloud container clusters describe ${{ secrets.GKE_CLUSTER_NAME }} \
                --region ${{ secrets.GKE_ZONE }} \
                --project ${{ secrets.GCP_PROJECT_ID }} \
                --format="value(status)")
              echo "Cluster status: $STATUS"
              if [ "$STATUS" = "RUNNING" ]; then
                echo "✅ Cluster is ready"
                break
              fi
              echo "⏳ Waiting for cluster to be ready..."
              sleep 10
            done
          '

      - name: ⚙️ Get GKE Credentials
        if: steps.check_cluster.outputs.exists == 'true'
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
          location: ${{ secrets.GKE_ZONE }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: 🏗️ Create GPT Namespace
        if: steps.check_cluster.outputs.exists == 'true'
        run: |
          echo "Creating namespace..."
          kubectl apply -f deployments/namespace.yaml
          
          # Wait for namespace to be ready
          kubectl wait --for=condition=Ready namespace/gpt --timeout=60s || true

      - name: 📦 Apply Kubernetes Manifests
        if: steps.check_cluster.outputs.exists == 'true'
        run: |
          echo "Applying Kubernetes manifests..."
          kubectl apply -f deployments/
          
          echo "Waiting for main-runner deployment to be ready..."
          kubectl rollout status deployment main-runner -n gpt --timeout=300s

      - name: 🔄 Restart Bot Deployments
        if: steps.check_cluster.outputs.exists == 'true'
        run: |
          echo "Restarting deployments..."
          kubectl rollout restart deployment stock-trader -n gpt || true
          kubectl rollout restart deployment options-trader -n gpt || true
          kubectl rollout restart deployment futures-trader -n gpt || true
          kubectl rollout restart deployment main-runner -n gpt || true
          
          echo "Waiting for deployments to be ready..."
          kubectl rollout status deployment stock-trader -n gpt --timeout=300s || true
          kubectl rollout status deployment options-trader -n gpt --timeout=300s || true
          kubectl rollout status deployment futures-trader -n gpt --timeout=300s || true
          kubectl rollout status deployment main-runner -n gpt --timeout=300s || true

      - name: 🔎 Verify Pods
        if: steps.check_cluster.outputs.exists == 'true'
        run: |
          echo "Final pod status:"
          kubectl get pods -n gpt
          kubectl get deployments -n gpt