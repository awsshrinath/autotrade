name: Deploy Tron System to GKE

on:
  push:
    branches:
      - main
  repository_dispatch:
    types: [cluster_ready]

jobs:
  build-and-push-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Authenticate to Google Cloud
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: Configure Docker
      run: gcloud auth configure-docker asia-south1-docker.pkg.dev --quiet

    - name: Build and Push All Images
      run: |
        TAG=$(date +%Y%m%d%H%M%S)
        IMAGE_PREFIX="asia-south1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/tron-system"

        docker build -f dashboard_api/Dockerfile -t $IMAGE_PREFIX/tron-backend:$TAG -t $IMAGE_PREFIX/tron-backend:latest .
        docker push --all-tags $IMAGE_PREFIX/tron-backend

        docker build -f frontend/Dockerfile -t $IMAGE_PREFIX/tron-frontend:$TAG -t $IMAGE_PREFIX/tron-frontend:latest ./frontend
        docker push --all-tags $IMAGE_PREFIX/tron-frontend

        docker build -f gpt_runner/log_aggregator/Dockerfile -t $IMAGE_PREFIX/log-aggregator:$TAG -t $IMAGE_PREFIX/log-aggregator:latest .
        docker push --all-tags $IMAGE_PREFIX/log-aggregator
        
        docker build -t $IMAGE_PREFIX/gpt-runner:$TAG -t $IMAGE_PREFIX/gpt-runner:latest --build-arg RUNNER_SCRIPT=runner/main_runner.py .
        docker push $IMAGE_PREFIX/gpt-runner:$TAG
        docker push $IMAGE_PREFIX/gpt-runner:latest
        
        docker build -t $IMAGE_PREFIX/stock-trader:$TAG -t $IMAGE_PREFIX/stock-trader:latest --build-arg RUNNER_SCRIPT=stock_trading/stock_runner.py .
        docker push --all-tags $IMAGE_PREFIX/stock-trader

        docker build -t $IMAGE_PREFIX/options-trader:$TAG -t $IMAGE_PREFIX/options-trader:latest --build-arg RUNNER_SCRIPT=options_trading/options_runner.py .
        docker push --all-tags $IMAGE_PREFIX/options-trader

        docker build -t $IMAGE_PREFIX/futures-trader:$TAG -t $IMAGE_PREFIX/futures-trader:latest --build-arg RUNNER_SCRIPT=futures_trading/futures_runner.py .
        docker push --all-tags $IMAGE_PREFIX/futures-trader

  deploy-to-gke:
    name: Deploy to GKE with Helm
    runs-on: ubuntu-latest
    needs: build-and-push-images
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Authenticate to Google Cloud
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v1'
      with:
        install_components: 'gke-gcloud-auth-plugin'

    - name: Configure kubectl
      env:
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
        GKE_ZONE: ${{ secrets.GKE_ZONE }}
      run: |
        gcloud container clusters get-credentials "${GKE_CLUSTER}" --zone "${GKE_ZONE}" --project "${GCP_PROJECT_ID}"

    - name: Create Kubernetes secrets
      run: |
        kubectl create secret generic openai-api-key-secret --from-literal=api_key='${{ secrets.OPENAI_API_KEY }}' --dry-run=client -o yaml | kubectl apply -f - -n gpt
        kubectl create secret generic fastapi-api-key-secret --from-literal=api_key_hash='${{ secrets.API_KEY_HASH }}' --dry-run=client -o yaml | kubectl apply -f - -n gpt

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'

    - name: Deploy with Helm
      run: |
        helm dependency update ./helm
        
        # Clean up orphaned resources and any failed releases before deploying
        kubectl delete configmap tron-system-config -n gpt --ignore-not-found=true
        helm uninstall tron-system --namespace gpt || true
        
        helm upgrade --install tron-system ./helm \
          --namespace gpt \
          --create-namespace \
          --set-string global.imageTag=${{ github.sha }} \
          --timeout 10m 