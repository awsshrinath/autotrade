name: Error Report Generation

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight
  workflow_dispatch:  # Allow manual triggering

jobs:
  generate-error-report:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest bandit safety
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Check for syntax errors with flake8
      run: |
        mkdir -p ./reports
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics > ./reports/syntax_errors.txt || true
        
    - name: Run tests
      run: |
        pytest -v > ./reports/test_results.txt || true
        
    - name: Check for security vulnerabilities with bandit
      run: |
        bandit -r . -x ./tests,./venv -f txt > ./reports/security_scan.txt || true
        
    - name: Check for vulnerable dependencies with safety
      run: |
        safety check -r requirements.txt > ./reports/dependency_check.txt || true
        
    - name: Generate comprehensive error report
      run: |
        echo "# Tron Project Error Report" > error-report.md
        echo "## Generated on $(date)" >> error-report.md
        echo "" >> error-report.md
        
        echo "## Syntax Errors" >> error-report.md
        echo '```' >> error-report.md
        cat ./reports/syntax_errors.txt >> error-report.md
        echo '```' >> error-report.md
        echo "" >> error-report.md
        
        echo "## Test Results" >> error-report.md
        echo '```' >> error-report.md
        cat ./reports/test_results.txt >> error-report.md
        echo '```' >> error-report.md
        echo "" >> error-report.md
        
        echo "## Security Vulnerabilities" >> error-report.md
        echo '```' >> error-report.md
        cat ./reports/security_scan.txt >> error-report.md
        echo '```' >> error-report.md
        echo "" >> error-report.md
        
        echo "## Dependency Vulnerabilities" >> error-report.md
        echo '```' >> error-report.md
        cat ./reports/dependency_check.txt >> error-report.md
        echo '```' >> error-report.md
        
    - name: Upload error report
      uses: actions/upload-artifact@v3
      with:
        name: error-report
        path: error-report.md
        
    - name: Create issue if errors found
      if: ${{ always() }}
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          
          // Check if there are any errors
          const syntaxErrors = fs.readFileSync('./reports/syntax_errors.txt', 'utf8');
          const testFailures = fs.readFileSync('./reports/test_results.txt', 'utf8');
          const securityIssues = fs.readFileSync('./reports/security_scan.txt', 'utf8');
          const dependencyIssues = fs.readFileSync('./reports/dependency_check.txt', 'utf8');
          
          const hasErrors = syntaxErrors.includes('error') || 
                           testFailures.includes('FAILED') ||
                           securityIssues.includes('Issue') ||
                           dependencyIssues.includes('vulnerability');
          
          if (hasErrors) {
            const errorReport = fs.readFileSync('error-report.md', 'utf8');
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Error Report: ${new Date().toISOString().split('T')[0]}`,
              body: errorReport,
              labels: ['error-report', 'bug']
            });
            
            console.log('Created issue with error report');
          } else {
            console.log('No errors found, skipping issue creation');
          }
