import { useState } from 'react';

const TronArchitectureViewer = () => {
  const [activeSection, setActiveSection] = useState(null);

  const sections = {
    externalSources: {
      title: "External Data Sources",
      color: "#3d5a5d",
      items: [
        { id: "YF", name: "Yahoo Finance API", desc: "SGX Nifty, Historical Data" },
        { id: "AV", name: "Alpha Vantage API", desc: "Backup Historical Data" },
        { id: "KC", name: "KiteConnect API", desc: "Fallback Data Source" },
        { id: "ZD", name: "Zerodha API", desc: "Trade Execution" },
        { id: "VIX", name: "India VIX", desc: "Volatility Index" }
      ]
    },
    gcpServices: {
      title: "GCP Backend Services",
      color: "#3d5a80",
      items: [
        { id: "SM", name: "Secret Manager", desc: "Secure Credentials" },
        { id: "FS", name: "Firestore", desc: "Real-time Data" },
        { id: "GCS", name: "Cloud Storage", desc: "Archives & Backups" }
      ]
    },
    infrastructure: {
      title: "Infrastructure Layer",
      color: "#333",
      items: [
        { id: "LB", name: "Load Balancer", desc: "External Access" },
        { id: "ING", name: "Ingress + SSL/TLS", desc: "logs.tron-trading.com" },
        { id: "CM", name: "ConfigMap", desc: "Configuration" },
        { id: "SEC", name: "Secrets", desc: "API Keys" },
        { id: "NP", name: "Network Policies", desc: "Security" }
      ]
    },
    tradingPods: {
      title: "Trading Pods",
      color: "#2c4e6c",
      items: [
        { id: "MR", name: "Main Runner", desc: "Orchestrator", key: true },
        { id: "ST", name: "Stock Trader", desc: "Equity Trading" },
        { id: "OT", name: "Options Trader", desc: "Options Trading" },
        { id: "FT", name: "Futures Trader", desc: "Futures Trading" }
      ]
    },
    support: {
      title: "Support Services",
      color: "#4b5358",
      items: [
        { id: "LM", name: "Log Monitor Service", desc: "FastAPI + Web UI" },
        { id: "DB", name: "Dashboard Service", desc: "Trading Dashboard" },
        { id: "TS", name: "Token Service", desc: "Authentication" }
      ]
    },
    cognitiveSystem: {
      title: "Cognitive Intelligence System",
      color: "#66476e",
      items: [
        { id: "CS", name: "Cognitive Engine", desc: "Decision Making", key: true },
        { id: "TJ", name: "Thought Journal", desc: "Decision Logging" },
        { id: "MM", name: "Memory Manager", desc: "Multi-layer Memory" },
        { id: "MS", name: "Metacognition", desc: "Self-Analysis" },
        { id: "VR", name: "Volatility Regime", desc: "Market Analysis" }
      ]
    },
    tradingIntelligence: {
      title: "Trading Intelligence Core",
      color: "#1a4d7c",
      items: [
        { id: "SS", name: "Strategy Selector", desc: "VIX + Regime Based", key: true },
        { id: "TM", name: "Trade Manager", desc: "Execution Engine" },
        { id: "RG", name: "Risk Governor", desc: "Risk Controls" },
        { id: "CAP", name: "Capital Manager", desc: "Position Sizing" }
      ]
    }
  };

  const connections = [
    { from: "externalSources.YF", to: "tradingPods.MR" },
    { from: "externalSources.AV", to: "tradingPods.MR" },
    { from: "externalSources.KC", to: "tradingPods.MR" },
    { from: "externalSources.VIX", to: "tradingPods.MR" },
    { from: "externalSources.ZD", to: "tradingPods.ST" },
    { from: "externalSources.ZD", to: "tradingPods.OT" },
    { from: "externalSources.ZD", to: "tradingPods.FT" },
    { from: "gcpServices.SM", to: "infrastructure.SEC" },
    { from: "infrastructure.SEC", to: "tradingPods.MR" },
    { from: "infrastructure.LB", to: "infrastructure.ING" },
    { from: "infrastructure.ING", to: "tradingPods.MR" },
    { from: "tradingPods.MR", to: "cognitiveSystem.VR" },
    { from: "cognitiveSystem.VR", to: "tradingIntelligence.SS" },
    { from: "tradingIntelligence.SS", to: "tradingIntelligence.TM" },
    { from: "tradingIntelligence.TM", to: "tradingIntelligence.RG" },
    { from: "tradingIntelligence.RG", to: "tradingIntelligence.CAP" },
    { from: "tradingIntelligence.TM", to: "cognitiveSystem.CS" },
    { from: "cognitiveSystem.CS", to: "cognitiveSystem.TJ" },
    { from: "cognitiveSystem.CS", to: "cognitiveSystem.MM" },
    { from: "cognitiveSystem.CS", to: "cognitiveSystem.MS" },
    { from: "cognitiveSystem.MS", to: "tradingIntelligence.SS" },
    { from: "tradingIntelligence.CAP", to: "tradingPods.ST" },
    { from: "tradingIntelligence.CAP", to: "tradingPods.OT" },
    { from: "tradingIntelligence.CAP", to: "tradingPods.FT" },
    { from: "cognitiveSystem.TJ", to: "gcpServices.GCS" },
    { from: "cognitiveSystem.MM", to: "gcpServices.GCS" },
    { from: "cognitiveSystem.MS", to: "gcpServices.GCS" },
    { from: "tradingPods.ST", to: "gcpServices.FS" },
    { from: "tradingPods.OT", to: "gcpServices.FS" },
    { from: "tradingPods.FT", to: "gcpServices.FS" }
  ];

  const highlights = [
    {
      title: "Adaptive Intelligence",
      description: "Cognitive system with memory layers, thought journaling, and metacognitive analysis"
    },
    {
      title: "Market Awareness",
      description: "Multi-source data integration with real-time volatility regime detection"
    },
    {
      title: "Dynamic Strategy Selection",
      description: "Based on market conditions (VIX levels, trend/range classification)"
    },
    {
      title: "Enterprise-Grade Infrastructure",
      description: "Kubernetes orchestration with auto-healing and scaling"
    },
    {
      title: "Comprehensive Risk Management",
      description: "Multiple layers of risk controls with position sizing using Kelly Criterion"
    }
  ];

  const findComponent = (path) => {
    const [sectionKey, itemId] = path.split('.');
    return sections[sectionKey].items.find(item => item.id === itemId);
  };

  const getConnectionLabel = (from, to) => {
    const fromComp = findComponent(from);
    const toComp = findComponent(to);
    return `${fromComp.name} â†’ ${toComp.name}`;
  };
  
  const handleSectionClick = (key) => {
    setActiveSection(activeSection === key ? null : key);
  };

  return (
    <div className="flex flex-col bg-gray-900 text-white min-h-screen p-6">
      <h1 className="text-3xl font-bold text-center text-blue-400 mb-6">TRON Trading System Architecture</h1>
      
      {/* Architecture Diagram */}
      <div className="bg-gray-800 p-6 rounded-lg shadow-lg mb-8">
        <h2 className="text-2xl mb-4 text-center font-semibold">System Architecture</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {/* Left Column - External Sources & GCP */}
          <div className="flex flex-col gap-4">
            <div 
              className="p-4 rounded-lg border-2" 
              style={{ backgroundColor: sections.externalSources.color, borderColor: `${sections.externalSources.color}88` }}
              onClick={() => handleSectionClick('externalSources')}
            >
              <h3 className="font-bold text-lg">{sections.externalSources.title}</h3>
              {(activeSection === 'externalSources' || activeSection === null) && (
                <ul className="mt-2 space-y-1">
                  {sections.externalSources.items.map(item => (
                    <li key={item.id} className="flex items-center">
                      <span className="font-mono text-xs bg-gray-700 px-1 rounded mr-2">{item.id}</span>
                      <span>{item.name}</span>
                    </li>
                  ))}
                </ul>
              )}
            </div>
            
            <div 
              className="p-4 rounded-lg border-2" 
              style={{ backgroundColor: sections.gcpServices.color, borderColor: `${sections.gcpServices.color}88` }}
              onClick={() => handleSectionClick('gcpServices')}
            >
              <h3 className="font-bold text-lg">{sections.gcpServices.title}</h3>
              {(activeSection === 'gcpServices' || activeSection === null) && (
                <ul className="mt-2 space-y-1">
                  {sections.gcpServices.items.map(item => (
                    <li key={item.id} className="flex items-center">
                      <span className="font-mono text-xs bg-gray-700 px-1 rounded mr-2">{item.id}</span>
                      <span>{item.name}</span>
                    </li>
                  ))}
                </ul>
              )}
            </div>
            
            <div 
              className="p-4 rounded-lg border-2" 
              style={{ backgroundColor: sections.infrastructure.color, borderColor: `${sections.infrastructure.color}88` }}
              onClick={() => handleSectionClick('infrastructure')}
            >
              <h3 className="font-bold text-lg">{sections.infrastructure.title}</h3>
              {(activeSection === 'infrastructure' || activeSection === null) && (
                <ul className="mt-2 space-y-1">
                  {sections.infrastructure.items.map(item => (
                    <li key={item.id} className="flex items-center">
                      <span className="font-mono text-xs bg-gray-700 px-1 rounded mr-2">{item.id}</span>
                      <span>{item.name}</span>
                    </li>
                  ))}
                </ul>
              )}
            </div>
          </div>
          
          {/* Middle Column - Core Systems */}
          <div className="flex flex-col gap-4">
            <div 
              className="p-4 rounded-lg border-2" 
              style={{ backgroundColor: sections.cognitiveSystem.color, borderColor: `${sections.cognitiveSystem.color}88` }}
              onClick={() => handleSectionClick('cognitiveSystem')}
            >
              <h3 className="font-bold text-lg">{sections.cognitiveSystem.title}</h3>
              {(activeSection === 'cognitiveSystem' || activeSection === null) && (
                <ul className="mt-2 space-y-1">
                  {sections.cognitiveSystem.items.map(item => (
                    <li key={item.id} className="flex items-center">
                      <span className="font-mono text-xs bg-gray-700 px-1 rounded mr-2">{item.id}</span>
                      <span className={item.key ? "font-bold" : ""}>{item.name}</span>
                      {item.key && <span className="ml-2 text-yellow-400 text-xs">â˜…</span>}
                    </li>
                  ))}
                </ul>
              )}
            </div>
            
            <div 
              className="p-4 rounded-lg border-2" 
              style={{ backgroundColor: sections.tradingIntelligence.color, borderColor: `${sections.tradingIntelligence.color}88` }}
              onClick={() => handleSectionClick('tradingIntelligence')}
            >
              <h3 className="font-bold text-lg">{sections.tradingIntelligence.title}</h3>
              {(activeSection === 'tradingIntelligence' || activeSection === null) && (
                <ul className="mt-2 space-y-1">
                  {sections.tradingIntelligence.items.map(item => (
                    <li key={item.id} className="flex items-center">
                      <span className="font-mono text-xs bg-gray-700 px-1 rounded mr-2">{item.id}</span>
                      <span className={item.key ? "font-bold" : ""}>{item.name}</span>
                      {item.key && <span className="ml-2 text-yellow-400 text-xs">â˜…</span>}
                    </li>
                  ))}
                </ul>
              )}
            </div>
          </div>
          
          {/* Right Column - Trading Pods & Support */}
          <div className="flex flex-col gap-4">
            <div 
              className="p-4 rounded-lg border-2" 
              style={{ backgroundColor: sections.tradingPods.color, borderColor: `${sections.tradingPods.color}88` }}
              onClick={() => handleSectionClick('tradingPods')}
            >
              <h3 className="font-bold text-lg">{sections.tradingPods.title}</h3>
              {(activeSection === 'tradingPods' || activeSection === null) && (
                <ul className="mt-2 space-y-1">
                  {sections.tradingPods.items.map(item => (
                    <li key={item.id} className="flex items-center">
                      <span className="font-mono text-xs bg-gray-700 px-1 rounded mr-2">{item.id}</span>
                      <span className={item.key ? "font-bold" : ""}>{item.name}</span>
                      {item.key && <span className="ml-2 text-yellow-400 text-xs">â˜…</span>}
                    </li>
                  ))}
                </ul>
              )}
            </div>
            
            <div 
              className="p-4 rounded-lg border-2" 
              style={{ backgroundColor: sections.support.color, borderColor: `${sections.support.color}88` }}
              onClick={() => handleSectionClick('support')}
            >
              <h3 className="font-bold text-lg">{sections.support.title}</h3>
              {(activeSection === 'support' || activeSection === null) && (
                <ul className="mt-2 space-y-1">
                  {sections.support.items.map(item => (
                    <li key={item.id} className="flex items-center">
                      <span className="font-mono text-xs bg-gray-700 px-1 rounded mr-2">{item.id}</span>
                      <span>{item.name}</span>
                    </li>
                  ))}
                </ul>
              )}
            </div>
          </div>
        </div>
        
        {/* Key Data Flows */}
        <div className="mt-8">
          <h3 className="text-xl mb-2">Key Data Flows</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="bg-gray-700 p-3 rounded-lg">
              <h4 className="font-semibold text-blue-300">Market Data Flow</h4>
              <ul className="space-y-1 text-sm">
                <li>â†’ External APIs â†’ Main Runner</li>
                <li>â†’ Main Runner â†’ Volatility Regime</li>
                <li>â†’ Volatility Regime â†’ Strategy Selector</li>
                <li>â†’ Strategy Selector â†’ Trade Manager</li>
                <li>â†’ Trade Manager â†’ Risk Governor â†’ Capital Manager</li>
              </ul>
            </div>
            
            <div className="bg-gray-700 p-3 rounded-lg">
              <h4 className="font-semibold text-purple-300">Cognitive Intelligence Flow</h4>
              <ul className="space-y-1 text-sm">
                <li>â†’ Trade Manager â†’ Cognitive Engine</li>
                <li>â†’ Cognitive Engine â†’ Thought Journal, Memory, Metacognition</li>
                <li>â†’ Metacognition â†’ Strategy Selector (feedback)</li>
                <li>â†’ All Cognitive Components â†’ Cloud Storage (persistence)</li>
              </ul>
            </div>
            
            <div className="bg-gray-700 p-3 rounded-lg">
              <h4 className="font-semibold text-green-300">Execution Flow</h4>
              <ul className="space-y-1 text-sm">
                <li>â†’ Capital Manager â†’ Trading Pods (Stock/Options/Futures)</li>
                <li>â†’ Trading Pods â†’ Zerodha API (execution)</li>
                <li>â†’ Trading Pods â†’ Firestore (data persistence)</li>
                <li>â†’ Trading Pods â†’ Log Monitor (operational logging)</li>
              </ul>
            </div>
            
            <div className="bg-gray-700 p-3 rounded-lg">
              <h4 className="font-semibold text-yellow-300">Infrastructure Flow</h4>
              <ul className="space-y-1 text-sm">
                <li>â†’ Secret Manager â†’ Secrets â†’ All Trading Pods</li>
                <li>â†’ Load Balancer â†’ Ingress â†’ Services</li>
                <li>â†’ ConfigMap â†’ All Pods (configuration)</li>
                <li>â†’ Network Policies â†’ All Communication (security)</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
      
      {/* Architecture Highlights */}
      <div className="bg-gray-800 p-6 rounded-lg shadow-lg">
        <h2 className="text-2xl mb-4 font-semibold text-center">Architecture Highlights</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {highlights.map((highlight, index) => (
            <div key={index} className="bg-gray-700 p-4 rounded-lg">
              <h3 className="text-lg font-semibold text-blue-300">{highlight.title}</h3>
              <p className="mt-2 text-gray-300">{highlight.description}</p>
            </div>
          ))}
        </div>
      </div>
      
      <div className="text-center mt-6 text-gray-400 text-sm">
        <p>TRON Trading System Architecture â€¢ Production Readiness Score: 9.8/10</p>
      </div>
    </div>
  );
};

export default TronArchitectureViewer;